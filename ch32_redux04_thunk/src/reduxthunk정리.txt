* redux-thunk : 리덕스 미들웨어 중 비동기 작업 처리 시 가장 많이 쓰는 미들웨어
** 서버 API로 데이터를 호출해서 웹앱 제작

- thunk 문법 - 액션 생성 함수를 대체
const thunk함수명 = () => (dispatch, getState) => {
    
}

** redux-thunk를 통해서 비동기적으로 데이터 구현 시 고려사항 => Promise 추가
1. Promise가 시작, 성공, 실패했을 때, 다른 액션을 디스패치해줘야 함
2. 각 Promise마다 thunk함수를 생성
3. Reducer에서 액션에 따라 로딩중, 결과출력, 에러상태를 처리해줘야 함


========== 리덕스 thunk 모듈 생성 ==========
1. api로부터 데이터를 호출
    데이터를 불러오는 코드 작성

2. 액션타입생성 - 전체데이터 가져오기, 각각데이터 가져오기 (서브페이지)
    전체데이터 가져오기 : 복수명칭사용
    각각데이터 가져오기 : 단수명칭사용

2-1. 전체데이터 가져오기
const GET_PRODUCTS = 'GET_PRODUCTS'; // 로딩중 (데이터 가져오는 중)
const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS'; // 데이터 가져오기 성공
const GET_PRODUCTS_ERROR = 'GET_PRODUCTS_ERROR'; // 데이터 가져오기 실패

2-2. 각각데이터 가져오기
const GET_PRODUCT = 'GET_PRODUCT'; // 로딩중 (데이터 가져오는 중)
const GET_PRODUCT_SUCCESS = 'GET_PRODUCT_SUCCESS'; // 데이터 가져오기 성공
const GET_PRODUCT_ERROR = 'GET_PRODUCT_ERROR'; // 데이터 가져오기 실패

3. 액션생성함수를 thunk함수로 처리 - 한 함수에 로딩, 성공, 실패 전부 처리 => Promise 사용 => async와 await키워드까지 작성

3-1. 전체데이터 가져오는 thunk함수
export const 액션함수명 = () => async dispatch => { // 프로미스 함수여서 async 붙히기
    dispatch({ type: GET_PRODUCTS }); // 액션타입 지정
    try {
        1. 데이터 로딩 중
        const product = await API데이터호출;

        2. 데이터 로딩 성공
        dispatch({ type: GET_PRODUCTS_SUCCESS, product });
    } catch(e){
        dispatch({ type: GET_PRODUCTS_ERROR, error(e) });
    }
}

4. 초기값 지정 - 로딩중, 성공, 실패

5. 리듀서 - 각 case가 로딩중, 성공, 실패
