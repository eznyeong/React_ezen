//redux : 리액트 상태관리 라이브러리 중 가장 유명한 라이브러리
//ContextAPI보다 체계적으로 데이터 관리할 수 있음

//리액트 데이터 관리 용어 정리
//1. props : 부모컴포넌트가 자손컴포넌트에 데이터 전달
//2. state : 컴포넌트가 저장하고 변경하는 데이터
//3. context : 전역적으로 자손컴포넌트에 전달하는 데이터
//4. redux : 서버에서 받은 데이터를 앱전체에 전달하거나 관리할 때 사용

//Context API : 프로젝트가 작고, 비동기 작업이 별로 없고, redux가 어려운 경우
//Redux : 프로젝트가 크고, 비동기 작업이 많고, redux습득을 잘한 경우

//리덕스의 용어
//1. 스토어 : 현재의 앱상태, 리듀서, 내장함수 등을 저장 - 한 프로젝트에 한개만 생성가능
//2. 액션 : 상태에 변화가 필요할 때, 액션을 발생시킴
/*
  {
    type: "액션명", //type속성을 필수로 갖고 있어야 함
    ex01: 값,
    ex02: 값
  }
*/
//3. 액션 생성 함수 : 액션을 만드는 함수
/*
  export function 액션생성함수(매개변수){
    return {
      type: "액션명",
      ex01: 값
    }
  }
*/

//4. 리듀서 : 변화를 일으키는 함수 - useReducer와 문법 같음
function 리듀서함수명(state,action){
    //상태 업데이트 로직 - switch구문 사용
}

//5. 디스패치 : 리듀서에 액션을 전달 => 리듀서가 액션을 받은 후 스토어 변경작업


** 리덕스 폴더구조
1. modules : 리덕스 모듈을 담는 폴더
    ** 리덕스모듈 : 액션타입, 액션생성함수, 리듀서를 담은 JS파일을 의미
                   => 각각 분리해서 작성해도 상관없지만 하나로 쓰는 Ducks패턴을 사용
2. components : 컴포넌트를 담는 폴더 - 프레젠테이셔널 컴포넌트 담는 폴더
                                      => 화면 구현 컴포넌트
3. containers : 컴포넌트를 담는 폴더 - 컨테이너 컴포넌트 담는 폴더
                                      => 스토어상태조회, dispatch하는 컴포넌트
                => 컴포넌트를 분리하는 건 Ducks패턴
                => 실제로는 한컴포넌트에 작성해도 되지만, 창시자가 이렇게 썼다보니 개발자들이 분리하는 것이 보통